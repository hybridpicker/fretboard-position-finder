/**
 * ChordViewController - Optimized controller for chord view functionality
 */
class ChordViewController {
  /**
   * Create a new ChordViewController
   * @param {object} config - Configuration options
   */
  constructor(config = {}) {
    // Configuration with defaults
    this.config = {
      debug: false,
      enableCursors: true,
      enableInversions: true,
      enableKeyboardNavigation: true,
      stringCount: 6,
      ...config
    };
    
    // Initialize state
    this.state = {
      initialized: false,
      currentPosition: 'Basic Position',
      currentRange: '',
      currentChord: null,
      activeNotes: [],
      keyboardNavigationEnabled: this.config.enableKeyboardNavigation
    };
    
    // Initialize component state
    this.components = {
      cursor: {
        active: this.config.enableCursors,
        leftCursors: [],
        rightCursors: [],
        lastDirection: 'right'
      },
      inversions: {
        active: this.config.enableInversions,
        availableInversions: ['Basic Position']
      },
      keyboardNavigation: {
        active: this.config.enableKeyboardNavigation
      }
    };
    
    // DOM elements cache
    this.elements = {
      fretboard: null,
      chordDisplay: null,
      positionSelector: null,
      rangeSelector: null,
      inversionButtons: []
    };
    
    // Performance monitoring
    this.performance = new PerformanceMonitor(this.config.debug);
    
    // Add log method
    this.log = (message, level = 'debug') => {
      // Use the debugLog function from utilities
      debugLog(this.config.debug, message, level);
    };
    
    // Add getParameter method
    this.getParameter = (name, defaultValue = '') => {
      // First try to get from URL parameters
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.has(name)) {
        return urlParams.get(name);
      }
      
      // Then try to get from a form element with matching ID
      const element = document.getElementById(name);
      if (element && element.value) {
        return element.value;
      }
      
      // Fallback to default value
      return defaultValue;
    };
    
    // Initialize
    this.init();
  }
  
  /**
   * Initialize the controller
   */
  init() {
    this.performance.start('init');
    this.log('Initializing ChordViewController');
    
    // Cache DOM elements
    this.cacheDOMElements();
    
    // Initialize parameters
    this.initializeFromURL();
    
    // Initialize event listeners
    this.initEventListeners();
    
    // Mark as initialized
    this.state.initialized = true;
    
    // Log initialization
    this.performance.end('init');
    this.log(`Initialization complete (stringCount: ${this.config.stringCount})`);
    
    // Dispatch custom event
    document.dispatchEvent(new CustomEvent('chord-view-initialized', {
      detail: { controller: this }
    }));
  }
  
  /**
   * Cache DOM elements
   */
  cacheDOMElements() {
    this.elements.fretboard = document.getElementById('fretboardcontainer');
    this.elements.chordDisplay = document.getElementById('chord_display');
    this.elements.positionSelector = document.getElementById('position_select');
    this.elements.rangeSelector = document.getElementById('note_range');
    
    // Get all inversion buttons
    this.elements.inversionButtons = document.querySelectorAll('.inversion-control');
  }
  
  /**
   * Initialize state from URL parameters
   */
  initializeFromURL() {
    // Get initial parameters from URL or form values
    const initialPosition = this.getParameter('position', 'Basic Position');
    const initialRange = this.getParameter('note_range', '');
    
    // Set current state
    this.state.currentPosition = initialPosition;
    this.state.currentRange = initialRange;
    
    // Try to extract current chord from URL or page data
    this.extractCurrentChord();
    
    this.log(`Initialized with position: ${initialPosition}, range: ${initialRange}`);
    this.log(`Current chord: ${this.state.currentChord ? this.state.currentChord.root + ' ' + this.state.currentChord.type : 'None'}`);
  }
  
  /**
   * Initialize event listeners for chord view interactions
   */
  initEventListeners() {
    this.performance.start('initEventListeners');
    this.log('Setting up chord view event listeners');
    
    // Set up position selector change handler
    if (this.elements.positionSelector) {
      this.elements.positionSelector.addEventListener('change', (event) => {
        this.state.currentPosition = event.target.value;
        this.log(`Position changed to: ${this.state.currentPosition}`);
        
        // TODO: Add position change handling
      });
    }
    
    // Set up range selector change handler
    if (this.elements.rangeSelector) {
      this.elements.rangeSelector.addEventListener('change', (event) => {
        this.state.currentRange = event.target.value;
        this.log(`Range changed to: ${this.state.currentRange}`);
        
        // TODO: Add range change handling
      });
    }
    
    // Set up inversion button click handlers
    if (this.elements.inversionButtons.length > 0) {
      this.elements.inversionButtons.forEach(button => {
        button.addEventListener('click', (event) => {
          const position = event.target.getAttribute('data-position') || 'Basic Position';
          this.state.currentPosition = position;
          this.log(`Inversion changed to: ${position}`);
          
          // TODO: Add inversion change handling
        });
      });
    }
    
    // Set up keyboard navigation if enabled
    if (this.components.keyboardNavigation.active) {
      document.addEventListener('keydown', (event) => {
        if (!this.state.keyboardNavigationEnabled) return;
        
        // Handle arrow keys for navigation
        if (event.key === 'ArrowRight' || event.key === 'ArrowLeft') {
          this.log(`Keyboard navigation: ${event.key}`);
          
          // TODO: Add keyboard navigation handling
        }
      });
    }
    
    this.performance.end('initEventListeners');
  }
  
  /**
   * Extract current chord from URL or page data
   */
  extractCurrentChord() {
    // Try to get from URL parameters
    const chordRoot = this.getParameter('chord_select', '');
    let chordType = this.getParameter('chord_type_select', '');
    
    if (chordRoot && chordType) {
      this.state.currentChord = {
        root: chordRoot,
        type: chordType
      };
    } else {
      // Fallback to defaults if not found
      this.state.currentChord = {
        root: 'C',
        type: 'Major'
      };
    }
  }

  /**
   * Activate a specific chord position or inversion
   * @param {string} position - The name of the position/inversion (e.g., 'Basic Position', 'First Inversion')
   * @param {string} range - The note range identifier
   */
  activatePosition(position, range) {
    this.performance.start('activatePosition');
    this.log(`Activating position: ${position}, range: ${range}`);

    // Update internal state
    this.state.currentPosition = position;
    if (range !== undefined) { // Only update range if provided
        this.state.currentRange = range;
    }

    // TODO: Implement the actual logic to fetch data and update the UI for the new position/range
    // This might involve calling other internal methods or interacting with the DOM

    this.performance.end('activatePosition');
    this.log(`Position activated: ${this.state.currentPosition}, Range: ${this.state.currentRange}`);

    // Return value might need adjustment based on expected behavior (e.g., return fetched data)
    // For compatibility with the original function's potential return, return true or fetched data
    return true; // Placeholder return
  }
}