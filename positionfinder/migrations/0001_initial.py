# Generated by Django 2.2.1 on 2019-05-18 05:04

from django.db import migrations, models
import django.db.models.deletion
import positionfinder.chord_position_choices
import positionfinder.notes_choices
import positionfinder.string_choices
import positionfinder.string_range_choices


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ChordNotes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_name', models.CharField(max_length=30)),
                ('chord_name', positionfinder.notes_choices.ChordChoicesField(choices=[('Dominant 7', 'Dominant 7'), ('Major 7', 'Major 7'), ('Minor 7', 'Minor 7'), ('Minor7b5', 'Minor 7b5')], default='Major 7', max_length=20, verbose_name='Chord Name')),
                ('range', positionfinder.string_range_choices.StringRangeChoicesField(choices=[('b - A', 'b - A'), ('b - E', 'b - E'), ('b - d', 'b - d'), ('d - E', 'd - E'), ('e - A', 'e - A'), ('e - E', 'e - E'), ('e - d', 'e - d'), ('e - g', 'e - g'), ('g - A', 'g - A'), ('g - E', 'g - E')], default='e - g', max_length=8, verbose_name='String Range')),
                ('tonal_root', models.IntegerField(default=0, help_text='defines the tonal space')),
                ('first_note', positionfinder.notes_choices.NotesChoicesField(choices=[(0, 'C'), (1, 'Db/C#'), (2, 'D'), (3, 'Eb/D#'), (4, 'E'), (5, 'F'), (6, 'Gb/F#'), (7, 'G'), (8, 'Ab/G#'), (9, 'A'), (10, 'Bb/A#'), (11, 'B')], default=0, verbose_name='First Note')),
                ('first_note_string', positionfinder.string_choices.StringChoicesField(blank=True, choices=[('AString', 'AString'), ('ELowString', 'ELowString'), ('bString', 'bString'), ('dString', 'dString'), ('eString', 'eString'), ('gString', 'gString')], max_length=20, null=True, verbose_name='String for Note')),
                ('second_note', positionfinder.notes_choices.NotesChoicesField(blank=True, choices=[(0, 'C'), (1, 'Db/C#'), (2, 'D'), (3, 'Eb/D#'), (4, 'E'), (5, 'F'), (6, 'Gb/F#'), (7, 'G'), (8, 'Ab/G#'), (9, 'A'), (10, 'Bb/A#'), (11, 'B')], null=True, verbose_name='Second Note')),
                ('second_note_string', positionfinder.string_choices.StringChoicesField(blank=True, choices=[('AString', 'AString'), ('ELowString', 'ELowString'), ('bString', 'bString'), ('dString', 'dString'), ('eString', 'eString'), ('gString', 'gString')], max_length=20, null=True, verbose_name='String for Note')),
                ('third_note', positionfinder.notes_choices.NotesChoicesField(blank=True, choices=[(0, 'C'), (1, 'Db/C#'), (2, 'D'), (3, 'Eb/D#'), (4, 'E'), (5, 'F'), (6, 'Gb/F#'), (7, 'G'), (8, 'Ab/G#'), (9, 'A'), (10, 'Bb/A#'), (11, 'B')], null=True, verbose_name='Third Note')),
                ('third_note_string', positionfinder.string_choices.StringChoicesField(blank=True, choices=[('AString', 'AString'), ('ELowString', 'ELowString'), ('bString', 'bString'), ('dString', 'dString'), ('eString', 'eString'), ('gString', 'gString')], max_length=20, null=True, verbose_name='String for Note')),
                ('fourth_note', positionfinder.notes_choices.NotesChoicesField(blank=True, choices=[(0, 'C'), (1, 'Db/C#'), (2, 'D'), (3, 'Eb/D#'), (4, 'E'), (5, 'F'), (6, 'Gb/F#'), (7, 'G'), (8, 'Ab/G#'), (9, 'A'), (10, 'Bb/A#'), (11, 'B')], null=True, verbose_name='Fourth Tone')),
                ('fourth_note_string', positionfinder.string_choices.StringChoicesField(blank=True, choices=[('AString', 'AString'), ('ELowString', 'ELowString'), ('bString', 'bString'), ('dString', 'dString'), ('eString', 'eString'), ('gString', 'gString')], max_length=20, null=True, verbose_name='String for Note')),
                ('fifth_note', positionfinder.notes_choices.NotesChoicesField(blank=True, choices=[(0, 'C'), (1, 'Db/C#'), (2, 'D'), (3, 'Eb/D#'), (4, 'E'), (5, 'F'), (6, 'Gb/F#'), (7, 'G'), (8, 'Ab/G#'), (9, 'A'), (10, 'Bb/A#'), (11, 'B')], null=True, verbose_name='Sixth Tone')),
                ('fifth_note_string', positionfinder.string_choices.StringChoicesField(blank=True, choices=[('AString', 'AString'), ('ELowString', 'ELowString'), ('bString', 'bString'), ('dString', 'dString'), ('eString', 'eString'), ('gString', 'gString')], max_length=20, null=True, verbose_name='String for Note')),
                ('sixth_note', positionfinder.notes_choices.NotesChoicesField(blank=True, choices=[(0, 'C'), (1, 'Db/C#'), (2, 'D'), (3, 'Eb/D#'), (4, 'E'), (5, 'F'), (6, 'Gb/F#'), (7, 'G'), (8, 'Ab/G#'), (9, 'A'), (10, 'Bb/A#'), (11, 'B')], null=True, verbose_name='Seventh Tone')),
                ('sixth_note_string', positionfinder.string_choices.StringChoicesField(blank=True, choices=[('AString', 'AString'), ('ELowString', 'ELowString'), ('bString', 'bString'), ('dString', 'dString'), ('eString', 'eString'), ('gString', 'gString')], max_length=20, null=True, verbose_name='String for Note')),
            ],
            options={
                'verbose_name': 'Tones for Chord',
                'verbose_name_plural': 'Tones for Chords',
            },
        ),
        migrations.CreateModel(
            name='Notes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note_name', models.CharField(max_length=30)),
                ('tonal_root', models.IntegerField(default=0, help_text='defines the tonal space of the notes')),
                ('first_note', models.IntegerField(default=0)),
                ('second_note', models.IntegerField(blank=True, null=True)),
                ('third_note', models.IntegerField(blank=True, null=True)),
                ('fourth_note', models.IntegerField(blank=True, null=True)),
                ('fifth_note', models.IntegerField(blank=True, null=True)),
                ('sixth_note', models.IntegerField(blank=True, null=True)),
                ('seventh_note', models.IntegerField(blank=True, null=True)),
                ('eigth_note', models.IntegerField(blank=True, null=True)),
                ('ninth_note', models.IntegerField(blank=True, null=True)),
                ('tenth_note', models.IntegerField(blank=True, null=True)),
                ('eleventh_note', models.IntegerField(blank=True, null=True)),
                ('twelth_note', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Tones for Scale',
                'verbose_name_plural': 'Tones for Scales',
                'ordering': ['note_name'],
            },
        ),
        migrations.CreateModel(
            name='NotesCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(max_length=30)),
            ],
            options={
                'verbose_name': 'category name',
                'verbose_name_plural': 'category names',
            },
        ),
        migrations.CreateModel(
            name='Root',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('pitch', models.IntegerField()),
            ],
            options={
                'verbose_name': 'Rootnote',
                'verbose_name_plural': 'Rootnotes',
                'ordering': ('pitch', 'name'),
            },
        ),
        migrations.CreateModel(
            name='NotesPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position_order', models.IntegerField(verbose_name='Order of Position')),
                ('position', models.CharField(help_text='2,3,4,5', max_length=25, verbose_name='position')),
                ('notes_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='positionfinder.Notes')),
            ],
            options={
                'verbose_name': 'notes position',
                'verbose_name_plural': 'notes positions',
                'ordering': ('notes_name', 'position_order'),
            },
        ),
        migrations.AddField(
            model_name='notes',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='positionfinder.NotesCategory'),
        ),
        migrations.CreateModel(
            name='ChordPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inversion_order', positionfinder.chord_position_choices.ChordInversionChoicesField(blank=True, choices=[('Basic Position', 'Basic Position'), ('Fifth Inversion', 'Fifth Inversion'), ('First Inversion', 'First Inversion'), ('Fourth Inversion', 'Fourth Inversion'), ('Second Inversion', 'Second Inversion'), ('Sixth Inversion', 'Sixth Inversion'), ('Third Inversion', 'Third Inversion')], max_length=20, null=True, verbose_name='Inversion for Chord')),
                ('first_note', models.IntegerField(default=0)),
                ('second_note', models.IntegerField(blank=True, null=True)),
                ('third_note', models.IntegerField(blank=True, null=True)),
                ('fourth_note', models.IntegerField(blank=True, null=True)),
                ('fifth_note', models.IntegerField(blank=True, null=True)),
                ('sixth_note', models.IntegerField(blank=True, null=True)),
                ('notes_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='positionfinder.ChordNotes')),
            ],
            options={
                'verbose_name': 'Chord position',
                'verbose_name_plural': 'Chord positions',
                'ordering': ('notes_name', 'inversion_order'),
            },
        ),
        migrations.AddField(
            model_name='chordnotes',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='positionfinder.NotesCategory'),
        ),
    ]
